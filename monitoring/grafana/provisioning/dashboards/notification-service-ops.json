{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDB",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "title": "Notification RPC",
  "tags": ["notification", "rpc", "influxdb", "telegraf", "pet-project"],
  "timezone": "",
  "schemaVersion": 38,
  "version": 1,
  "refresh": "10s",
  "time": { "from": "now-6h", "to": "now" },
  "panels": [
    {
      "type": "timeseries",
      "title": "RPS (1s)",
      "gridPos": { "x": 0, "y": 0, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "req/s" } },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"counter\")\n  |> aggregateWindow(every: 1s, fn: sum, createEmpty: false)\n  |> yield(name: \"rps\")"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "RPM (1m)",
      "gridPos": { "x": 12, "y": 0, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "req/min" } },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"counter\")\n  |> aggregateWindow(every: 1m, fn: sum, createEmpty: false)\n  |> yield(name: \"rpm\")"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "Latency p95",
      "gridPos": { "x": 0, "y": 8, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "ms" } },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"duration_ms\")\r\n  |> window(every: 1m)\r\n  |> quantile(q: 0.95, method: \"estimate_tdigest\")\r\n  |> duplicate(column: \"_stop\", as: \"_time\")\r\n  |> window(every: inf)\r\n  |> keep(columns: [\"_time\",\"_value\"])"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "Latency p99",
      "gridPos": { "x": 12, "y": 8, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "ms" } },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"duration_ms\")\r\n  |> window(every: 1m)\r\n  |> quantile(q: 0.99, method: \"estimate_tdigest\")\r\n  |> duplicate(column: \"_stop\", as: \"_time\")\r\n  |> window(every: inf)\r\n  |> keep(columns: [\"_time\",\"_value\"])"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "Bytes written per minute",
      "gridPos": { "x": 0, "y": 16, "w": 12, "h": 8 },
      "fieldConfig": { "defaults": { "unit": "bytes" } },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"bytes_written\")\n  |> aggregateWindow(every: 1m, fn: sum)\n  |> yield(name: \"bytes_per_min\")"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "In-flight requests",
      "gridPos": { "x": 12, "y": 16, "w": 12, "h": 8 },
      "targets": [
        {
          "query": "from(bucket: \"monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"notification_rpc\" and r._field == \"inflight\")\n  |> aggregateWindow(every: 10s, fn: mean)\n  |> yield(name: \"inflight\")"
        }
      ]
    }
  ]
}
